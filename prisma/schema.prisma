
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int    @id @default(autoincrement())
  email    String
  username String
  password String
}

model Type {
  type_id   Int      @id @default(autoincrement())
  type_name String?
  Skill     Skill[]
  Buff      Buff[]
  Debuff    Debuff[]
}

model Skill {
  skill_id Int    @id @default(autoincrement())
  type_id  Int
  name     String
  amount   Int
  Type     Type   @relation(fields: [type_id], references: [type_id])
}

model Buff {
  buff_id    Int          @id @default(autoincrement())
  type_id    Int
  name       String
  amount     Int
  Type       Type         @relation(fields: [type_id], references: [type_id])
  ItemBuff   ItemBuff[]
  WeaponBuff WeaponBuff[]
}

model Debuff {
  debuff_id    Int            @id @default(autoincrement())
  type_id      Int
  name         String
  amount       Int
  Type         Type           @relation(fields: [type_id], references: [type_id])
  ItemDebuff   ItemDebuff[]
  WeaponDebuff WeaponDebuff[]
}

model Item {
  item_id                         Int             @id @default(autoincrement())
  name                            String
  description                     String?
  base_stat_id                    Int?
  ItemBuff                        ItemBuff[]
  ItemDebuff                      ItemDebuff[]
  Item_base_stat                  Item_base_stat? @relation(fields: [item_base_statItem_base_stat_id], references: [item_base_stat_id])
  item_base_statItem_base_stat_id Int?
}

model Item_base_stat {
  item_base_stat_id Int    @id @default(autoincrement())
  item_base_stats   Int
  Item              Item[]
}

model Weapon_base_stat {
  weapon_base_stat_id Int      @id @default(autoincrement())
  weapon_base_stats   Int
  Weapon              Weapon[]
}

model ItemBuff {
  item_id Int
  buff_id Int
  Item    Item @relation(fields: [item_id], references: [item_id])
  Buff    Buff @relation(fields: [buff_id], references: [buff_id])

  @@id([item_id, buff_id])
}

model ItemDebuff {
  item_id   Int
  debuff_id Int
  Item      Item   @relation(fields: [item_id], references: [item_id])
  Debuff    Debuff @relation(fields: [debuff_id], references: [debuff_id])

  @@id([item_id, debuff_id])
}

model Weapon {
  weapon_id                           Int                 @id @default(autoincrement())
  name                                String
  damage                              Int
  critical_chance                     Float?
  WeaponBuff                          WeaponBuff[]
  WeaponDebuff                        WeaponDebuff[]
  WeaponEnhancement                   WeaponEnhancement[]
  Weapon_base_stat                    Weapon_base_stat?   @relation(fields: [weapon_base_statWeapon_base_stat_id], references: [weapon_base_stat_id])
  weapon_base_statWeapon_base_stat_id Int?
}

model WeaponBuff {
  weapon_id Int
  buff_id   Int
  Weapon    Weapon @relation(fields: [weapon_id], references: [weapon_id])
  Buff      Buff   @relation(fields: [buff_id], references: [buff_id])

  @@id([weapon_id, buff_id])
}

model WeaponDebuff {
  weapon_id Int
  debuff_id Int
  Weapon    Weapon @relation(fields: [weapon_id], references: [weapon_id])
  Debuff    Debuff @relation(fields: [debuff_id], references: [debuff_id])

  @@id([weapon_id, debuff_id])
}

model WeaponEnhancement {
  weapon_id   Int
  enhancement String
  Weapon      Weapon @relation(fields: [weapon_id], references: [weapon_id])

  @@id([weapon_id, enhancement])
}

model Player {
  player_id       Int    @id @default(autoincrement())
  username        String
  profile_picture Bytes?
  email           String
  password        String
  best_score      Int?
  best_runtime    Int?
  playtime        Int?
  savedata        Bytes?
}
